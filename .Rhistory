from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
# Create a named matrix from the data
chord_mat <- matrix(data$value, nrow = 3, dimnames = list(unique(data$from), unique(data$to)))
circos.clear()  # Clear any existing plots
circos.par(start.degree = 90)  # Set starting position at 90 degrees
# Create the chord diagram
chordDiagram(
chord_mat,
col = c("red", "blue", "green"),
transparency = 0.7,
directional = TRUE,
order = union(rownames(chord_mat), colnames(chord_mat)),
annotationTrack = "grid",
preAllocateTracks = 1
)
# Add a title
title("Chord Diagram for Climate Data")
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
# Create a named matrix from the data
chord_mat <- matrix(data$value, nrow = 3, dimnames = list(unique(data$from), unique(data$to)))
# Remove rows with missing values
chord_mat <- chord_mat[complete.cases(chord_mat), ]
circos.clear()  # Clear any existing plots
circos.par(start.degree = 90)  # Set starting position at 90 degrees
# Create the chord diagram
chordDiagram(
chord_mat,
col = c("red", "blue", "green"),
transparency = 0.7,
directional = TRUE,
order = union(rownames(chord_mat), colnames(chord_mat)),
annotationTrack = "grid",
preAllocateTracks = 1
)
# Add a title
title("Chord Diagram for Climate Data")
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
# Create the chord diagram
chordDiagram(
x = as.matrix(table(data$from, data$to)),
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
annotationTrack = "grid"
)
# Add a title
title("Chord Diagram for Climate Data")
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
# Create the chord diagram
chordDiagram(
mat = as.matrix(table(data$from, data$to)),
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
annotationTrack = "grid"
)
# Add a title
title("Chord Diagram for Climate Data")
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
chordDiagram(
mat = as.matrix(table(data$from, data$to)),
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
annotationTrack = "grid"
)
# Create the chord diagram
mat <- as.matrix(table(data$from, data$to))
chordDiagram(
mat = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
annotationTrack = "grid"
)
chordDiagram(
mat = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc"
)
chordDiagram(
x = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc"
)
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
# Create the chord diagram
mat <- as.matrix(table(data$from, data$to))
chordDiagram(
x = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc"
)
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
# Create the chord diagram
mat <- as.matrix(table(data$from, data$to))
values <- c(10, 5, 2, 8, 4, 3, 9, 6, 1)
chordDiagram(
x = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc",
values = values
)
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
value = c(10, 5, 2, 8, 4, 3, 9, 6, 1)
)
mat <- as.matrix(table(data$from, data$to))
categories <- c("Year1", "Year2", "Year3", "Temperature", "Precipitation", "Humidity")
chordDiagram(
x = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc",
values = values,
names = categories
)
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
values <- c(10, 5, 2, 8, 4, 3, 9, 6, 1, 0, 0, 0)
chordDiagram(
x = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc",
values = values,
names = categories
)
library(circlize)
data <- data.frame(
from = c("Year1", "Year1", "Year1", "Year2", "Year2", "Year2", "Year3", "Year3", "Year3"),
to = c("Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity", "Temperature", "Precipitation", "Humidity"),
values <- c(10, 5, 2, 8, 4, 3, 9, 6, 1, 0, 0, 0)
values <- c(10, 5, 2, 8, 4, 3, 9, 6, 1, 0, 0, 0)
chordDiagram(
x = mat,
col = c("red", "blue", "green"),
transparency = 0.7,
direction = "clockwise",
direction.type = "arc",
values = values,
names = categories
)
install.packages("mega7r", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
install.packages("mega6r", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
install.packages("phangorn", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
library(phangorn, lib.loc = "D:/r studio/R-4.1.2/library")
Circ<-read.csv("C:/Users/HP/OneDrive/Desktop/CDD.csv",
header = TRUE,row.names =1 )
print(Circ)
str(Circ)
require(circlize)
Circ <- as.matrix(Circ)
chordDiagram(Circ)
chordDiagram(Circ, annotationTrack = "grid", preAllocateTracks = 1)
circos.trackPlotRegion(track.index = 2, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
#print labels
circos.text(mean(xlim), ylim[1] + 2.5, sector.name,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex=0.6)
circos.axis(h = "top", labels.cex = 0.5, major.tick.percentage = 0.2,
sector.index = sector.name, track.index = 2)
}, bg.border = NA)
install.packages("vctrs", lib="D:/r studio/R-4.1.2/library")
install.packages("vctrs", version = "0.6.1", "0.6.3")
install.packages("LPmerge", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
install.packages("LPmerge", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
library(LPmerge, lib.loc = "D:/r studio/R-4.1.2/library")
install.packages("TreeclimbR", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
load("C:/Users/HP/OneDrive/Desktop/Circular-diagram-showing-the-different-features-of-QTL-and-MQTL-Circle-A-Number-of-QTL_W640.jpg")
View(Circ)
View(Circ)
View(Circ)
View(Circ)
View(Circ)
View(Circ)
View(Circ)
install.packages("TreeHeatmap", dependencies = FALSE, lib="D:/r studio/R-4.1.2/library")
View(Circ)
# Load required library
library(ggplot2)
# Create a data frame with your data
data <- data.frame(
"Name of the Genotypes" = c("Pitic", "kalyan sona", "Belgudi", "Kalonuniya", "Bachhi", "Jira Mansari"),
"Height of the Plant" = c(100, 82, 88, 94, 96, 82),
"No of the Tillers" = c(95, 88, 94, 90, 83, 83),
"Days to Flowering" = c(86, 94, 88, 91, 83, 89)
)
# Create a long-format data frame for plotting
data_long <- reshape2::melt(data, id.vars = "Name of the Genotypes")
# Create a stacked bar chart
ggplot(data_long, aes(x = `Name of the Genotypes`, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Plant Data",
x = "Genotypes",
y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_fill_manual(values = c("Height of the Plant" = "blue",
"No of the Tillers" = "green",
"Days to Flowering" = "red"))
# Create a stacked bar chart
ggplot2::(data_long, aes(x = `Name of the Genotypes`, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Plant Data",
x = "Genotypes",
y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_fill_manual(values = c("Height of the Plant" = "blue",
"No of the Tillers" = "green",
"Days to Flowering" = "red"))
# Load required library
library(ggplot2)
# Create a data frame with your data
data <-data.frame(
"Name of the Genotypes" = c("Pitic", "kalyan sona", "Belgudi", "Kalonuniya", "Bachhi", "Jira Mansari"),
"Height of the Plant" = c(100, 82, 88, 94, 96, 82),
"No of the Tillers" = c(95, 88, 94, 90, 83, 83),
"Days to Flowering" = c(86, 94, 88, 91, 83, 89)
)
# Create a long-format data frame for plotting
data_long <- reshape2::melt(data, id.vars = "Name of the Genotypes")
# Create a stacked bar chart
ggplot2::(data_long, aes(x = `Name of the Genotypes`, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Plant Data",
x = "Genotypes",
y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_fill_manual(values = c("Height of the Plant" = "blue",
"No of the Tillers" = "green",
"Days to Flowering" = "red"))
# Load required library
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2, lib.loc = "D:/r studio/R-4.1.2/library")
library(ggplot2)
# Create a data frame with your data
data <-data.frame(
"Name of the Genotypes" = c("Pitic", "kalyan sona", "Belgudi", "Kalonuniya", "Bachhi", "Jira Mansari"),
"Height of the Plant" = c(100, 82, 88, 94, 96, 82),
"No of the Tillers" = c(95, 88, 94, 90, 83, 83),
"Days to Flowering" = c(86, 94, 88, 91, 83, 89)
)
# Create a long-format data frame for plotting
data_long <- reshape2::melt(data, id.vars = "Name of the Genotypes")
ggplot2::(data_long, aes(x = `Name of the Genotypes`, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Plant Data",
x = "Genotypes",
y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_fill_manual(values = c("Height of the Plant" = "blue",
"No of the Tillers" = "green",
"Days to Flowering" = "red"))
conflicts()
library(ggplot2)
R.version
install.packages("ggplot2", repos = "https://cran.r-project.org/src/contrib")
install.packages("ggplot2", repos = "https://cran.r-project.org/src/contrib")
install.packages("ggplot2", repos = "https://cran.r-project.org")
R.version
R.version
install.packages("ggplot")
install.packages("ggplot2", dependencies = FALSE)
library(ggplot2)
R.version
?princomp
?fviz_pca_var
?variability
library(variability)
?variability
?gen.var
?princomp
?fviz_pca
?fviz_pca
?gen.var
R.version
?mgidi
#cluster graphic
library(NbClust)
?NbClust
install.packages("qgraph")
setwd("C:/Users/HP/OneDrive/Desktop/mapping_example-main")
library(devtools)
library(mappoly)
library(qtlpoly)
library(viewpoly)
dat = read_geno_csv(file="C:/Users/HP/OneDrive/Desktop/mapping_example-main/data/BExMG_subset_with_contaminants_2075mrks.csv",
ploidy = 4, filter.non.conforming = F)
library(polymapR)
polymapR_dosage_matrix=export_data_to_polymapR(dat)
PCA_progeny(polymapR_dosage_matrix)
contaminants = c("X16009_N001", "X16009_N010","SW","X16009_N005","X16009_N006","X16009_N009")
screened_data <- screen_for_duplicate_individuals(dosage_matrix = ALL_dosages,
cutoff = 0.95,
plot_cor = T)
duplicates =  c("X16035_N028.1", "X16035_N029.1","X16400_N023","X16400_N038","X16405_N113","X16400_N006")
remove = c(contaminants,duplicates)
genotype_data = read.csv("C:/Users/HP/OneDrive/Desktop/mapping_example-main/data/BExMG_subset_with_contaminants_2075mrks.csv")
genotype_data_after_QC=genotype_data[,which(!colnames(genotype_data)%in%remove)]
write.csv(genotype_data_after_QC,"C:/Users/HP/OneDrive/Desktop/mapping_example-main/data/BExMG_subset_with_contaminants_2075mrks_afterQC.csv", row.names = F)
library(mappoly)
dat = read_geno_csv(file="C:/Users/HP/OneDrive/Desktop/mapping_example-main/data/BExMG_subset_with_contaminants_2075mrks_afterQC.csv", ploidy = 4, filter.non.conforming = T)
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = F)
dat
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
plot(seq.init)
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 7)
mat = rf_list_to_matrix(all.rf.pairwise)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
mat = rf_list_to_matrix(all.rf.pairwise)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
plot(mat)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
plot(grs)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = make_pairs_mappoly(all.rf.pairwise, input.seq = tempseq)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
LGS.upgma=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.upgma[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
comp = data.frame(UPGMA_Genomic = unlist(lapply(LGS.inter, function(x) length(x$seq$seq.num))),
Genomic = unlist(lapply(LGS.genomic, function(x) length(x$seq$seq.num))),
UPGMA = unlist(lapply(LGS.upgma, function(x) length(x$seq$seq.num))))
comp
LGS<-LGS.inter
single_chrom <- est_rf_hmm_sequential(input.seq = LGS[[1]]$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = LGS[[1]]$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
plot(single_chrom)
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
ptm <- proc.time()
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs <- parallel::parLapply(cl,LGS, phasing_and_hmm_rf)
View(LGS.inter)
View(grs)
View(LGS)
LGS<-LGS.inter
single_chrom <- est_rf_hmm_sequential(input.seq = LGS[[1]]$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = LGS[[1]]$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
######I faced error form this code######
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
summary_maps(MAPS.err)
ptm <- proc.time()
cl <- parallel::makeCluster(7)
